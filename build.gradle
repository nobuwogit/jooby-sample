import groovy.xml.MarkupBuilder

import javax.xml.bind.JAXB

group 'spark'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

buildscript {

    repositories {
        mavenCentral()
    }

    dependencies {
        /**
         * joobyRun
         */
        classpath group: 'org.jooby', name: 'jooby-gradle-plugin', version: '1.1.3'
    }
}

/* * We are writing a standalone application. */
apply plugin: 'application'

apply plugin: 'jooby'

/* * Some classic project configuration. */
version = 0.1
mainClassName = "my.samle.App"
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.jooby', name: 'jooby', version: '1.1.3'
    compile group: 'org.jooby', name: 'jooby-netty', version: '1.1.3'
    compile group: 'org.jooby', name: 'jooby-thymeleaf', version: '1.1.3'
    compile group: 'org.jooby', name: 'jooby-jooq', version: '1.1.3'
    compile('org.webjars:jquery:2.2.4')
    compile('org.webjars:bootstrap:3.3.7')
    compile 'org.jooq:jooq:3.7.4'

// https://mvnrepository.com/artifact/org.postgresql/postgresql
    compile group: 'org.postgresql', name: 'postgresql', version: '9.4-1200-jdbc41'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}
buildscript {
    repositories { mavenCentral() }
    dependencies {
        classpath 'org.jooq:jooq-codegen:3.7.4'
        classpath group: 'org.postgresql', name: 'postgresql', version: '9.4-1200-jdbc41'
    }
}
/* * We diverge from the default resources structure to adopt the Jooby standard. */
sourceSets.main.resources {
    srcDirs = ["conf", "public", "static"]
}
// Use your favourite XML builder to construct the code generation configuration file
// ----------------------------------------------------------------------------------
def writer = new StringWriter()
def xml = new MarkupBuilder(writer)
        .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.7.0.xsd') {
    jdbc() {
        driver('org.postgresql.Driver')
        url('jdbc:postgresql://localhost:5432/test_contact')
        user('postgres')
        password('postgres')
    }
    generator() {
        database() {
        }

        // Watch out for this caveat when using MarkupBuilder with "reserved names"
        // - https://github.com/jOOQ/jOOQ/issues/4797
        // - http://stackoverflow.com/a/11389034/521799
        // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
        generate([:]) {
            pojos true
            daos true
        }
        target() {
            packageName('org.jooq.example.gradle.db')
            directory('src/main/java')
        }
    }
}

// Run the code generator
// ----------------------
org.jooq.util.GenerationTool.generate(
        JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
)
